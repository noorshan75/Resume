import "./styles.css";
import React, { useState } from "react";
import { loadStripe } from "@stripe/stripe-js";
import {
  CardElement,
  Elements,
  CardNumberElement,
  CardExpiryElement,
  CardCvcElement,
  useStripe,
  useElements
} from "@stripe/react-stripe-js";

const stripePromise = loadStripe("pk_test_2pvmef7iSEXcggSUhQWPwKKO00xbfBGgZO");

const Form = () => {
  const stripe = useStripe();
  const elements = useElements();
  // const [subscribing, setSubscribing] = useState(false);
  const [accountInformation, setAccountInformation] = useState(null);
  const [errorToDisplay, setErrorToDisplay] = useState("");
  const [billingDetails, setBillingDetails] = useState({
    name: "",
    address: { country: "", city: "" }
  });

  const handleSubmit = async (event) => {
    // Block native form submission.

    event.preventDefault();

    // setSubscribing(true);

    if (!stripe || !elements) {
      // Stripe.js has not loaded yet. Make sure to disable
      // form submission until Stripe.js has loaded.
      return;
    }

    // Get a reference to a mounted CardElement. Elements knows how
    // to find your CardElement because there can only ever be one of
    // each type of element.
    const cardElement = elements.getElement(CardElement);

    // If a previous payment was attempted, get the lastest invoice
    // const latestInvoicePaymentIntentStatus = localStorage.getItem(
    //   'latestInvoicePaymentIntentStatus'
    // );

    // Use your card Element with other Stripe.js APIs
    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: "card",
      card: cardElement,
      billing_details: billingDetails
    });

    if (error) {
      console.log("[createPaymentMethod error]", error);
      // setSubscribing(false);
      setErrorToDisplay(error && error.message);
      return;
    }
    console.log("[PaymentMethod]", paymentMethod);
    const paymentMethodId = paymentMethod.id;
    console.log("payment id", paymentMethodId);
    // if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {
    //   // Update the payment method and retry invoice payment
    //   const invoiceId = localStorage.getItem('latestInvoiceId');
    //   retryInvoiceWithNewPaymentMethod({
    //     paymentMethodId: paymentMethodId,
    //     invoiceId: invoiceId,
    //   });
    //   return;
    // }

    // Create the subscription
    // createSubscription({
    //   paymentMethodId: paymentMethodId,
    // });
  };
  return (
    <div id="payment-form" className="flex justify-center">
      <div className="w-full inline-block border p-4 rounded-md">
        <div className="font-bold text-xl mb-2">
          Enter your card details. <br />
          Your subscription will start now.
        </div>
        <p className="text-gray-700 text-base">
          → Total due now <span></span>
        </p>
        <p className="text-gray-700 text-base mb-4">
          → Subscribing to <span className="font-bold"></span>
        </p>

        <div className="w-full">
          <div className="flex flex-wrap -mx-3 mb-2">
            <div className="w-full px-3 md:mb-0">
              <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                Full name
              </label>
              <input
                className="appearance-none block w-full bg-gray-200 border rounded-md py-3 px-2 mb-3 leading-tight focus:outline-none focus:bg-white"
                id="name"
                type="text"
                placeholder="First and last name"
                required
                value={billingDetails.name}
                onChange={(e) => {
                  setBillingDetails({
                    ...billingDetails,
                    name: e.target.value
                  });
                }}
              />
              <input
                className="appearance-none block w-full bg-gray-200 border rounded-md py-3 px-2 mb-3 leading-tight focus:outline-none focus:bg-white"
                id="country"
                type="text"
                placeholder="First and last name"
                required
                value={billingDetails.address.country}
                onChange={(e) => {
                  setBillingDetails({
                    ...billingDetails,
                    address: { country: e.target.value }
                  });
                }}
              />
              <input
                className="appearance-none block w-full bg-gray-200 border rounded-md py-3 px-2 mb-3 leading-tight focus:outline-none focus:bg-white"
                id="city"
                type="text"
                placeholder="city"
                required
                value={billingDetails.address.city}
                onChange={(e) => {
                  setBillingDetails({
                    ...billingDetails,
                    address: { city: e.target.value }
                  });
                }}
              />
            </div>
          </div>
          <form id="payment-form" onSubmit={handleSubmit}>
            <div className="flex flex-wrap -mx-3 mb-3">
              <div className="w-full px-3 mb-0">
                <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">
                  Card
                </label>
                <div
                  className="appearance-none block w-full bg-gray-200 text-gray-700 border rounded-md py-3 px-2 leading-tight focus:outline-none focus:bg-white"
                  id="card-element"
                >
                  <CardElement
                    options={{
                      style: {
                        base: {
                          fontSize: "16px",
                          color: "#32325d",
                          fontFamily:
                            "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif",
                          "::placeholder": {
                            color: "#a0aec0"
                          }
                        },
                        invalid: {
                          color: "#9e2146"
                        }
                      }
                    }}
                  />
                </div>
              </div>
            </div>
            <button
              id="submit-premium"
              className="w-full bg-pasha hover:bg-white hover:shadow-outline hover:text-pasha hover:border hover:border-black focus:shadow-outline text-white focus:bg-white focus:text-pasha font-light py-2 px-4 rounded-md"
              type="submit"
            >
              Sumbit
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

// export default function App() {
//   return (
//     <div className="App">
//       <h1>Hello CodeSandbox</h1>
//       <h2>Start editing to see some magic happen!</h2>
//     </div>
//   );
// }

const App = (props) => (
  <Elements stripe={stripePromise}>
    <Form {...props} />
  </Elements>
);

export default App;
